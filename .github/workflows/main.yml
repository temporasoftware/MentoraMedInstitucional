name: MentoraMed Landing Page

on:
  push:
    branches: [main]
permissions:
  contents: write

jobs:
  build-and-push:
    runs-on: ubuntu-latest
      
    steps:
      - name: Exibir Docker Image
        run: |
          echo "ðŸ”§ Dockerhub Image: ${{ secrets.DOCKER_IMAGE }}"
      - name: Checkout do cÃ³digo
        uses: actions/checkout@v3

      - name: Gerar .env.production
        run: |
          cat <<EOF > .env.production
          EOF
      - name: Login no Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build da imagem Docker
        run: |
          docker build \
            -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE }}:latest .
      - name: Push da imagem
        run: docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE }}:latest

      - name: Redeploy (Portainer /stacks/:id PUT)
        shell: bash
        run: |
          set -Eeuo pipefail
      
          STACK_ID="8"
          ENDPOINT_ID="24"
      
          # Escreve o docker-compose literal em um arquivo local
          cat > compose.yml <<'YAML'
          version: '3.8'
      
          services:
            mentoramed-root-site-production:
              image: aureolopes/mentoramed-root-site-production:latest
              container_name: mentoramed-root-site-production
              restart: always
              environment:
                - VIRTUAL_HOST=mentoramed.com.br,www.mentoramed.com.br
                - VIRTUAL_PORT=80
                - LETSENCRYPT_HOST=mentoramed.com.br,www.mentoramed.com.br
                - LETSENCRYPT_EMAIL=aureo@hotmail.co.jp
                - TZ=America/Sao_Paulo
              expose:
                - "80"                      # <- expÃµe 80 para o proxy
              networks:
                - web
              healthcheck:
                test: ["CMD-SHELL", "wget -qO- http://localhost/ || exit 1"]
                interval: 30s
                timeout: 5s
                retries: 3
      
          networks:
            web:
              external: true
          YAML
      
          # Monta o corpo JSON usando o arquivo como string crua
          jq -n --rawfile content compose.yml \
            --argjson prune false \
            --argjson pull true \
            '{
              StackFileContent: $content,
              Env: [],
              Prune: $prune,
              PullImage: $pull
            }' > body.json
      
          # PUT no stack com API Key
          curl -fsS --retry 5 --retry-all-errors --max-time 60 \
            -H "X-API-Key: ${{ secrets.PORTAINER_TOKEN }}" \
            -H "Content-Type: application/json" \
            -X PUT "https://portainer.nileo.com.br/api/stacks/${STACK_ID}?endpointId=${ENDPOINT_ID}" \
            --data-binary @body.json
